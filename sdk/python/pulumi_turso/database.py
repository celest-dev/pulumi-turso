# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from . import time as _time
from ._enums import *
from ._inputs import *

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 name: pulumi.Input[str],
                 allow_attach: Optional[pulumi.Input[bool]] = None,
                 block_reads: Optional[pulumi.Input[bool]] = None,
                 block_writes: Optional[pulumi.Input[bool]] = None,
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input['DatabaseSeedArgsArgs']] = None,
                 size_limit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Database resource.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "name", name)
        if allow_attach is not None:
            pulumi.set(__self__, "allow_attach", allow_attach)
        if block_reads is not None:
            pulumi.set(__self__, "block_reads", block_reads)
        if block_writes is not None:
            pulumi.set(__self__, "block_writes", block_writes)
        if is_schema is not None:
            pulumi.set(__self__, "is_schema", is_schema)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowAttach")
    def allow_attach(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_attach")

    @allow_attach.setter
    def allow_attach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_attach", value)

    @property
    @pulumi.getter(name="blockReads")
    def block_reads(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_reads")

    @block_reads.setter
    def block_reads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_reads", value)

    @property
    @pulumi.getter(name="blockWrites")
    def block_writes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "block_writes")

    @block_writes.setter
    def block_writes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_writes", value)

    @property
    @pulumi.getter(name="isSchema")
    def is_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_schema")

    @is_schema.setter
    def is_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schema", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[pulumi.Input['DatabaseSeedArgsArgs']]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[pulumi.Input['DatabaseSeedArgsArgs']]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_limit", value)


class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_attach: Optional[pulumi.Input[bool]] = None,
                 block_reads: Optional[pulumi.Input[bool]] = None,
                 block_writes: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input[pulumi.InputType['DatabaseSeedArgsArgs']]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_attach: Optional[pulumi.Input[bool]] = None,
                 block_reads: Optional[pulumi.Input[bool]] = None,
                 block_writes: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 is_schema: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 seed: Optional[pulumi.Input[pulumi.InputType['DatabaseSeedArgsArgs']]] = None,
                 size_limit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["allow_attach"] = allow_attach
            __props__.__dict__["block_reads"] = block_reads
            __props__.__dict__["block_writes"] = block_writes
            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            __props__.__dict__["is_schema"] = is_schema
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["schema"] = schema
            __props__.__dict__["seed"] = seed
            __props__.__dict__["size_limit"] = size_limit
            __props__.__dict__["archived"] = None
            __props__.__dict__["db_id"] = None
            __props__.__dict__["hostname"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["primary_region"] = None
            __props__.__dict__["regions"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["version"] = None
        super(Database, __self__).__init__(
            'turso:index:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DatabaseArgs.__new__(DatabaseArgs)

        __props__.__dict__["allow_attach"] = None
        __props__.__dict__["archived"] = None
        __props__.__dict__["block_reads"] = None
        __props__.__dict__["block_writes"] = None
        __props__.__dict__["db_id"] = None
        __props__.__dict__["group"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["instances"] = None
        __props__.__dict__["is_schema"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["primary_region"] = None
        __props__.__dict__["regions"] = None
        __props__.__dict__["schema"] = None
        __props__.__dict__["size_limit"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["version"] = None
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowAttach")
    def allow_attach(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "allow_attach")

    @property
    @pulumi.getter
    def archived(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="blockReads")
    def block_reads(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "block_reads")

    @property
    @pulumi.getter(name="blockWrites")
    def block_writes(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "block_writes")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter
    def group(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Mapping[str, 'outputs.DatabaseInstanceState']]:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="isSchema")
    def is_schema(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_schema")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryRegion")
    def primary_region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_region")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> pulumi.Output[str]:
        return pulumi.get(self, "size_limit")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")

