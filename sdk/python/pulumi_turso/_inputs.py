# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import time as _time
from ._enums import *

__all__ = [
    'DatabaseSeedArgsArgs',
    'DatabaseSeedArgsArgsDict',
]

MYPY = False

if not MYPY:
    class DatabaseSeedArgsArgsDict(TypedDict):
        type: pulumi.Input['DatabaseSeedType']
        name: NotRequired[pulumi.Input[str]]
        timestamp: NotRequired[pulumi.Input['_time.TimeArgsDict']]
        url: NotRequired[pulumi.Input[str]]
elif False:
    DatabaseSeedArgsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseSeedArgsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['DatabaseSeedType'],
                 name: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input['_time.TimeArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DatabaseSeedType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DatabaseSeedType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input['_time.TimeArgs']]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input['_time.TimeArgs']]):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


