// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package turso

import (
	"context"
	"reflect"

	"errors"
	"github.com/celest-dev/pulumi-turso/sdk/go/turso/internal"
	"github.com/celest-dev/pulumi-turso/sdk/go/turso/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseToken struct {
	pulumi.CustomResourceState

	Authorization DatabaseTokenAuthorizationPtrOutput `pulumi:"authorization"`
	Database      pulumi.StringOutput                 `pulumi:"database"`
	Expiration    pulumi.StringPtrOutput              `pulumi:"expiration"`
	ExpiresAt     time.TimePtrOutput                  `pulumi:"expiresAt"`
	ReadAttach    pulumi.StringArrayOutput            `pulumi:"readAttach"`
	Token         pulumi.StringOutput                 `pulumi:"token"`
}

// NewDatabaseToken registers a new resource with the given unique name, arguments, and options.
func NewDatabaseToken(ctx *pulumi.Context,
	name string, args *DatabaseTokenArgs, opts ...pulumi.ResourceOption) (*DatabaseToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseToken
	err := ctx.RegisterResource("turso:index:DatabaseToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseToken gets an existing DatabaseToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseTokenState, opts ...pulumi.ResourceOption) (*DatabaseToken, error) {
	var resource DatabaseToken
	err := ctx.ReadResource("turso:index:DatabaseToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseToken resources.
type databaseTokenState struct {
}

type DatabaseTokenState struct {
}

func (DatabaseTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseTokenState)(nil)).Elem()
}

type databaseTokenArgs struct {
	Authorization *DatabaseTokenAuthorization `pulumi:"authorization"`
	Database      string                      `pulumi:"database"`
	Expiration    *string                     `pulumi:"expiration"`
	ReadAttach    []string                    `pulumi:"readAttach"`
}

// The set of arguments for constructing a DatabaseToken resource.
type DatabaseTokenArgs struct {
	Authorization DatabaseTokenAuthorizationPtrInput
	Database      pulumi.StringInput
	Expiration    pulumi.StringPtrInput
	ReadAttach    pulumi.StringArrayInput
}

func (DatabaseTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseTokenArgs)(nil)).Elem()
}

type DatabaseTokenInput interface {
	pulumi.Input

	ToDatabaseTokenOutput() DatabaseTokenOutput
	ToDatabaseTokenOutputWithContext(ctx context.Context) DatabaseTokenOutput
}

func (*DatabaseToken) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseToken)(nil)).Elem()
}

func (i *DatabaseToken) ToDatabaseTokenOutput() DatabaseTokenOutput {
	return i.ToDatabaseTokenOutputWithContext(context.Background())
}

func (i *DatabaseToken) ToDatabaseTokenOutputWithContext(ctx context.Context) DatabaseTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTokenOutput)
}

// DatabaseTokenArrayInput is an input type that accepts DatabaseTokenArray and DatabaseTokenArrayOutput values.
// You can construct a concrete instance of `DatabaseTokenArrayInput` via:
//
//	DatabaseTokenArray{ DatabaseTokenArgs{...} }
type DatabaseTokenArrayInput interface {
	pulumi.Input

	ToDatabaseTokenArrayOutput() DatabaseTokenArrayOutput
	ToDatabaseTokenArrayOutputWithContext(context.Context) DatabaseTokenArrayOutput
}

type DatabaseTokenArray []DatabaseTokenInput

func (DatabaseTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseToken)(nil)).Elem()
}

func (i DatabaseTokenArray) ToDatabaseTokenArrayOutput() DatabaseTokenArrayOutput {
	return i.ToDatabaseTokenArrayOutputWithContext(context.Background())
}

func (i DatabaseTokenArray) ToDatabaseTokenArrayOutputWithContext(ctx context.Context) DatabaseTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTokenArrayOutput)
}

// DatabaseTokenMapInput is an input type that accepts DatabaseTokenMap and DatabaseTokenMapOutput values.
// You can construct a concrete instance of `DatabaseTokenMapInput` via:
//
//	DatabaseTokenMap{ "key": DatabaseTokenArgs{...} }
type DatabaseTokenMapInput interface {
	pulumi.Input

	ToDatabaseTokenMapOutput() DatabaseTokenMapOutput
	ToDatabaseTokenMapOutputWithContext(context.Context) DatabaseTokenMapOutput
}

type DatabaseTokenMap map[string]DatabaseTokenInput

func (DatabaseTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseToken)(nil)).Elem()
}

func (i DatabaseTokenMap) ToDatabaseTokenMapOutput() DatabaseTokenMapOutput {
	return i.ToDatabaseTokenMapOutputWithContext(context.Background())
}

func (i DatabaseTokenMap) ToDatabaseTokenMapOutputWithContext(ctx context.Context) DatabaseTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTokenMapOutput)
}

type DatabaseTokenOutput struct{ *pulumi.OutputState }

func (DatabaseTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseToken)(nil)).Elem()
}

func (o DatabaseTokenOutput) ToDatabaseTokenOutput() DatabaseTokenOutput {
	return o
}

func (o DatabaseTokenOutput) ToDatabaseTokenOutputWithContext(ctx context.Context) DatabaseTokenOutput {
	return o
}

func (o DatabaseTokenOutput) Authorization() DatabaseTokenAuthorizationPtrOutput {
	return o.ApplyT(func(v *DatabaseToken) DatabaseTokenAuthorizationPtrOutput { return v.Authorization }).(DatabaseTokenAuthorizationPtrOutput)
}

func (o DatabaseTokenOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseToken) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

func (o DatabaseTokenOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseToken) pulumi.StringPtrOutput { return v.Expiration }).(pulumi.StringPtrOutput)
}

func (o DatabaseTokenOutput) ExpiresAt() time.TimePtrOutput {
	return o.ApplyT(func(v *DatabaseToken) time.TimePtrOutput { return v.ExpiresAt }).(time.TimePtrOutput)
}

func (o DatabaseTokenOutput) ReadAttach() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseToken) pulumi.StringArrayOutput { return v.ReadAttach }).(pulumi.StringArrayOutput)
}

func (o DatabaseTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type DatabaseTokenArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseToken)(nil)).Elem()
}

func (o DatabaseTokenArrayOutput) ToDatabaseTokenArrayOutput() DatabaseTokenArrayOutput {
	return o
}

func (o DatabaseTokenArrayOutput) ToDatabaseTokenArrayOutputWithContext(ctx context.Context) DatabaseTokenArrayOutput {
	return o
}

func (o DatabaseTokenArrayOutput) Index(i pulumi.IntInput) DatabaseTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseToken {
		return vs[0].([]*DatabaseToken)[vs[1].(int)]
	}).(DatabaseTokenOutput)
}

type DatabaseTokenMapOutput struct{ *pulumi.OutputState }

func (DatabaseTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseToken)(nil)).Elem()
}

func (o DatabaseTokenMapOutput) ToDatabaseTokenMapOutput() DatabaseTokenMapOutput {
	return o
}

func (o DatabaseTokenMapOutput) ToDatabaseTokenMapOutputWithContext(ctx context.Context) DatabaseTokenMapOutput {
	return o
}

func (o DatabaseTokenMapOutput) MapIndex(k pulumi.StringInput) DatabaseTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseToken {
		return vs[0].(map[string]*DatabaseToken)[vs[1].(string)]
	}).(DatabaseTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTokenInput)(nil)).Elem(), &DatabaseToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTokenArrayInput)(nil)).Elem(), DatabaseTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTokenMapInput)(nil)).Elem(), DatabaseTokenMap{})
	pulumi.RegisterOutputType(DatabaseTokenOutput{})
	pulumi.RegisterOutputType(DatabaseTokenArrayOutput{})
	pulumi.RegisterOutputType(DatabaseTokenMapOutput{})
}
