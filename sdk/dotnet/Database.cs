// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Turso
{
    [TursoResourceType("turso:index:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        [Output("allowAttach")]
        public Output<bool> AllowAttach { get; private set; } = null!;

        [Output("archived")]
        public Output<bool> Archived { get; private set; } = null!;

        [Output("blockReads")]
        public Output<bool> BlockReads { get; private set; } = null!;

        [Output("blockWrites")]
        public Output<bool> BlockWrites { get; private set; } = null!;

        [Output("dbId")]
        public Output<string> DbId { get; private set; } = null!;

        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        [Output("instances")]
        public Output<ImmutableDictionary<string, Outputs.DatabaseInstanceState>> Instances { get; private set; } = null!;

        [Output("isSchema")]
        public Output<bool> IsSchema { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("primaryRegion")]
        public Output<string> PrimaryRegion { get; private set; } = null!;

        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        [Output("sizeLimit")]
        public Output<string> SizeLimit { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("turso:index:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("turso:index:Database", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Database(name, id, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowAttach")]
        public Input<bool>? AllowAttach { get; set; }

        [Input("blockReads")]
        public Input<bool>? BlockReads { get; set; }

        [Input("blockWrites")]
        public Input<bool>? BlockWrites { get; set; }

        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("isSchema")]
        public Input<bool>? IsSchema { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("seed")]
        public Input<Inputs.DatabaseSeedArgsArgs>? Seed { get; set; }

        [Input("sizeLimit")]
        public Input<string>? SizeLimit { get; set; }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }
}
