// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turso:index:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    public /*out*/ readonly archived!: pulumi.Output<boolean>;
    public /*out*/ readonly locations!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly primary!: pulumi.Output<string>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.primaryLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryLocation'");
            }
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryLocation"] = args ? args.primaryLocation : undefined;
            resourceInputs["replicaLocations"] = args ? args.replicaLocations : undefined;
            resourceInputs["archived"] = undefined /*out*/;
            resourceInputs["locations"] = undefined /*out*/;
            resourceInputs["primary"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["archived"] = undefined /*out*/;
            resourceInputs["locations"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["primary"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    extensions?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    primaryLocation: pulumi.Input<string>;
    replicaLocations?: pulumi.Input<pulumi.Input<string>[]>;
}
